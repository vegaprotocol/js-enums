import recast from "recast";
import parser from "recast/parsers/typescript.js";
import fs from "node:fs";

const version = "0.74.0";

const run = async () => {
  const res = await fetch(
    `https://raw.githubusercontent.com/vegaprotocol/documentation/main/specs/v${version}/proto.json`
  );
  const json = await res.json();
  const enums = json.files.map(({ enums }) => enums).flat();
  const b = recast.types.builders;
  const enumStatements = enums
    .map(({ longName, values, description }) => {
      const wordsEnum = b.exportNamedDeclaration(
        b.tsEnumDeclaration(
          b.identifier(longName.replace(/\./g, "")),
          values.map(({ name, description }) => {
            const v = b.tsEnumMember(b.identifier(name), b.stringLiteral(name));
            v.comments = [b.commentBlock(`* ${description} `)];
            return v;
          })
        )
      );
      const numberEnum = b.exportNamedDeclaration(
        b.tsEnumDeclaration(
          b.identifier(longName.replace(/\./g, "") + "Number"),
          values.map(({ name, description, number }) => {
            const v = b.tsEnumMember(
              b.identifier(name),
              b.literal(Number(number))
            );
            v.comments = [b.commentBlock(`* ${description} `)];
            return v;
          })
        )
      );

      wordsEnum.comments = [b.commentBlock(`* ${description}`)];
      numberEnum.comments = [b.commentBlock(`* ${description}`)];
      return [wordsEnum, numberEnum];
    })
    .flat();
  const ast = b.program(enumStatements);
  ast.comments = [
    b.commentBlock(`* Autogenerated file content`),
    b.commentBlock(`* Do not modify`),
    b.commentBlock(`* Generated from v${version}`),
    b.commentBlock(""),
  ];
  const code = recast.print(ast, {
    tabWidth: 2,
    parser,
  }).code;
  fs.writeFileSync("index.ts", code, "utf-8");
};

run()
  .then(() => {
    process.exit(0);
  })
  .catch((error) => {
    console.log(error);
    process.exit(1);
  });
